use sakila;

-- 1a. Display the first and last names of all actors from the table actor.
select first_name,last_name from actor;

-- 1b. Display the first and last name of each actor in a single column in upper case letters. Name the column Actor Name.
select concat(upper(first_name),' ',upper(last_name)) as 'Actor name' from actor;

-- 2a. You need to find the ID number, first name, and last name of an actor,
--  of whom you know only the first name, "Joe." What is one query would you use to obtain this information?
select actor_id,first_name,last_name from actor
where first_name='Joe';

-- 2b. Find all actors whose last name contain the letters GEN: 
select actor_id, first_name,last_name from actor
where last_name like '%gen%';

-- 2c. Find all actors whose last names contain the letters LI. This time, order the rows by last name and first name, in that order:
select actor_id, first_name,last_name from actor
where last_name like '%li%'
order by last_name, first_name;

-- 2d. Using IN, display the country_id and country columns of the following countries: Afghanistan, Bangladesh, and China:
select country_id, country from country
where country in ('Afghanistan', 'Bangladesh', 'China');

-- 3a. Add a middle_name column to the table actor. Position it between first_name and last_name.
alter table actor
add column middle_name varchar(50) after first_name;

-- 3b. You realize that some of these actors have tremendously long last names. 
-- Change the data type of the middle_name column to blobs.
alter table actor
modify column middle_name blob;

-- 3c. Now delete the middle_name column.
alter table actor
drop column middle_name;

-- 4a. List the last names of actors, as well as how many actors have that last name.
select last_name,count(last_name) from actor
group by last_name;

-- 4b. List last names of actors and the number of actors who have that last name, but only for names that are shared by at least two actors
select last_name,count(last_name) from actor
group by last_name
having count(last_name)>=2;

-- 4c. Oh, no! The actor HARPO WILLIAMS was accidentally entered in the actor table as GROUCHO WILLIAMS, 
-- the name of Harpo's second cousin's husband's yoga teacher. Write a query to fix the record.
update actor
set first_name = 'HARPO'
where first_name='GROUCHO' and last_name='WILLIAMS';

-- 4d. Perhaps we were too hasty in changing GROUCHO to HARPO. It turns out that GROUCHO was the correct name 
-- after all! In a single query, if the first name of the actor is currently HARPO, change it to GROUCHO. Otherwise, 
-- change the first name to MUCHO GROUCHO, as that is exactly what the actor will be with the grievous error. 
-- BE CAREFUL NOT TO CHANGE THE FIRST NAME OF EVERY ACTOR TO MUCHO GROUCHO, HOWEVER! 
-- (Hint: update the record using a unique identifier.) !!!!!!!!!!!!!!!
select @a_key:=actor_id from actor where first_name='GROUCHO' and last_name='WILLIAMS';
update actor
set first_name=if(first_name='HARPO','GROUCHO','MUCHO GROUCHO')
where actor_id=@a_key ;

-- 5a. You cannot locate the schema of the address table. Which query would you use to re-create it?
show create table address;

-- 6a. Use JOIN to display the first and last names, as well as the address, of each staff member. Use the tables staff and address:
select s.first_name, s.last_name, a.address
from staff as s
join address as a on s.address_id=a.address_id;

-- 6b. Use JOIN to display the total amount rung up by each staff member in August of 2005. Use tables staff and payment.
select first_name,last_name,
	(select sum(amount) from payment
    where staff.staff_id=payment.staff_id)
from staff;

-- 6c. List each film and the number of actors who are listed for that film. Use tables film_actor and film. Use inner join.
select title, 
	(select count(*) from film_actor
    where film.film_id=film_actor.film_id) as 'number of actors'
from film;

-- 6d. How many copies of the film Hunchback Impossible exist in the inventory system?
select
	(select count(store_id) from inventory
    where film.film_id=inventory.film_id) as 'number of copies'
from film
where title='Hunchback Impossible';

-- 6e. Using the tables payment and customer and the JOIN command, list the total paid by 
-- each customer. List the customers alphabetically by last name: 
select c.first_name,c.last_name,sum(p.amount) from customer as c
left join payment as p on c.customer_id=p.customer_id
group by c.first_name,c.last_name
order by c.last_name;

-- 7a. The music of Queen and Kris Kristofferson have seen an unlikely resurgence. As an unintended consequence, 
-- films starting with the letters K and Q have also soared in popularity. Use subqueries to display the titles of movies 
-- starting with the letters K and Q whose language is English.
select title from film
where (title like 'K%' or title like 'Q%') and language_id in 
	(select language_id from language
    where name='English'
	);

-- 7b. Use subqueries to display all actors who appear in the film Alone Trip.
select first_name, last_name from actor
where actor_id in 
	(select actor_id from film_actor
    where film_id in 
		(select film_id from film
        where title='Alone Trip'
    )
);

-- 7c. You want to run an email marketing campaign in Canada, for which you will need the names and email addresses 
-- of all Canadian customers. Use joins to retrieve this information.
select c.first_name,c.last_name,c.email from customer as c 
join address as a 
on a.address_id=c.address_id
join city as ci
on ci.city_id=a.city_id
join country as co
on co.country_id=ci.country_id
where country='Canada';

-- 7d. Sales have been lagging among young families, and you wish to target all family movies for a promotion. 
-- Identify all movies categorized as famiy films.
select f.title from film as f
join film_category as fc
on fc.film_id=f.film_id
join category as c
on c.category_id=fc.category_id
where c.name='Family';

-- 7e. Display the most frequently rented movies in descending order.
select title,rental_duration from film 
order by rental_duration desc;

-- 7f. Write a query to display how much business, in dollars, each store brought in.
select s.store_id as Store, sum(p.amount) as Earnings from store as s
join inventory as i on s.store_id=i.store_id
join rental as r on r.inventory_id=i.inventory_id
join payment as p on p.rental_id=r.rental_id
group by s.store_id;

-- 7g. Write a query to display for each store its store ID, city, and country.    
select st.store_id, ci.city, co.country from store as st
join address as a
on a.address_id=st.address_id
join city as ci
on a.city_id=ci.city_id
join country as co
on co.country_id=ci.country_id;

-- 7h. List the top five genres in gross revenue in descending order. (Hint: you may need to use the following tables: 
-- category, film_category, inventory, payment, and rental.)
select c.name as Film, sum(p.amount) as Revenue from category as c
join film_category as f on f.category_id=c.category_id
join inventory as i on f.film_id=i.film_id
join rental as r on r.inventory_id=i.inventory_id
join payment as p on p.rental_id=r.rental_id
group by c.name
order by Revenue desc limit 5;

-- 8a. In your new role as an executive, you would like to have an easy way of viewing the Top five genres by gross revenue. 
-- Use the solution from the problem above to create a view. If you haven't solved 7h, you can substitute another query to create a view.
create view top_revenue as
select c.name as Film, sum(p.amount) as Revenue from category as c
join film_category as f on f.category_id=c.category_id
join inventory as i on f.film_id=i.film_id
join rental as r on r.inventory_id=i.inventory_id
join payment as p on p.rental_id=r.rental_id
group by c.name
order by Revenue desc limit 5;

-- 8b. How would you display the view that you created in 8a?
select Film, Revenue from top_revenue;

-- 8c. You find that you no longer need the view top_five_genres. Write a query to delete it.
drop view top_revenue;
